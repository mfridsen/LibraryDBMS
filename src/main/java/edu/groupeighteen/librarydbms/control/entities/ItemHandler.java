package edu.groupeighteen.librarydbms.control.entities;

import edu.groupeighteen.librarydbms.control.db.DatabaseHandler;
import edu.groupeighteen.librarydbms.model.db.QueryResult;
import edu.groupeighteen.librarydbms.model.entities.Item;

import java.sql.*;

/**
 * @author Mattias Frids√©n
 * @project LibraryDBMS
 * @package edu.groupeighteen.librarydbms.control.entities
 * @contact matfir-1@student.ltu.se
 * @date 5/5/2023
 * <p>
 * We plan as much as we can (based on the knowledge available),
 * When we can (based on the time and resources available),
 * But not before.
 */
public class ItemHandler {
    //The code is cleaner if every Handler class stores a reference to the Connection
    private static Connection connection;

    //TODO-exception handle
    /**
     * To ensure that things are done in the correct order, only DatabaseHandler will retrieve its connection
     * on its own. The rest of the Handlers need to be assigned the connection, by calling their setup methods
     * with the connection as argument after the DatabaseHandlers setup method has been called.
     * @param con the Connection to the database.
     * @throws SQLException
     */
    public static void setup(Connection con) throws SQLException {
        connection = con;
    }

    //TODO-exception handle
    /**
     * Creates a new Item with the specified username and password and saves it to the database.
     * If the Item creation fails, this method returns null.
     *
     * @param title the title of the new Item object.
     * @return the created Item object on success, null on failure.
     */
    public static Item createNewItem(String title) {
        //No point creating invalid items
        if (title == null || title.equals("")) {
            System.err.println("Error creating a new item: empty title."); //TODO-log
            return null;
        }

        try {
            Item newItem = new Item(title);
            newItem.setItemID(saveItem(newItem));
            return newItem;
        } catch (Exception e) {
            System.err.println("Error creating a new item: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    //TODO-test
    //TODO-exception handle
    /**
     * Saves an Item object to the database.
     *
     * <p>This method attempts to insert a new item into the 'item' table. It uses the title property of the
     * provided Item object to populate the new record. The database is expected to generate
     * a unique ID for each new item, which is retrieved and returned by this method.</p>
     *
     * @param item the Item object to be saved. This object should have a title set.
     * @return the unique itemID generated by the database for the new item record.
     * @throws SQLException If an error occurs while interacting with the database, or if the database does not
     *      generate a new unique ID for the inserted item.
     */
    public static int saveItem(Item item) throws SQLException {
        //Prepare query
        String query = "INSERT INTO items (title) VALUES (?)"; //Update these two when more fields are added, as well as javadoc
        String[] params = {item.getTitle()}; //Update these two when more fields are added, as well as javadoc

        //Execute query
        QueryResult queryResult = DatabaseHandler.executePreparedQuery(query, params, Statement.RETURN_GENERATED_KEYS);

        //Get the generated itemID
        ResultSet generatedKeys = queryResult.getStatement().getGeneratedKeys();
        if (generatedKeys.next()) {
            int itemID = generatedKeys.getInt(1);
            queryResult.close();
            return itemID;
        } else {
            queryResult.close();
            throw new SQLException("Failed to insert the item, no ID obtained.");
        }
    }

    public static Item getItemByID(int itemID) {
        return new Item("");
    }

    public static Item getItemByTitle(String title) {
        return new Item("");
    }

    public boolean updateItem(Item item) {
        return false;
    }

    public boolean deleteItem(Item item) {
        return false;
    }
}