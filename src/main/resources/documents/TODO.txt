

//TODO Planning tests: these questions need answers:

    1. WHAT to do?
    2. WHY do it?
    3. HOW to do it?
    4. WHO does what?
    5. WHEN is it done?

    Consider which parts and functionalities are the most important.

    Consider the risk level of the system: which components can result in the system completely failing?

    Consider the different levels of testing: Unit-, Integration-, System- and Acceptance Testing.

    Consider which parts of the system can be developed using Test-Driven Development, and which can't, and why.
    To what extent can we prepare tests before we start work on the project?

    Can we use test data to test classes independently, or will some classes have to wait for others to be finished?

    Can we automate testing? Can we automate regression testing?

    Error and exception handling: under what conditions do we need the program to shut down?

    How do we organize the work?

    Can we use sprints and sprint testing?

    How much time should we allot for stabilization of the delivery? Is 1 week enough for finishing touches and final
    testing?

    Can we estimate the time required for testing? Should we keep track of our estimates, and see whether they are
    getting more or less accurate over time? (yes, at least for unit testing)
    Should we keep track of how much time is spent per line of code, on both development and testing?

    Create a dependency tree. Which classes and components are dependent on others?

//TODO Consider testing environments